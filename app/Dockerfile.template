# base images: https://hub.docker.com/r/balenalib/amd64-debian-node/tags 

# Specify Node.js version and Debian version as arguments
ARG NODEJS_VERSION="20.12"
ARG DEBIAN_VERSION="bookworm"

# Use balenalib base image optimized for the target hardware
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian-node:${NODEJS_VERSION}-${DEBIAN_VERSION}-build as builder

WORKDIR /opt/

# Copy your application code
COPY ./ /opt/

# Install dependencies including devDependencies
RUN npm ci

# Build the application
RUN npm run build

# Stage 2: Setup runtime environment
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian-node:${NODEJS_VERSION}-${DEBIAN_VERSION}-run

WORKDIR /opt/

# Copy built artifacts and necessary scripts from builder stage
COPY --from=builder /opt/ ./
COPY ./start.sh /opt/

# Install local-ssl-proxy globally for runtime
RUN npm install -g local-ssl-proxy && \
    # Clean npm cache to reduce image size
    npm cache clean --force

ENV NODE_ENV=production

# Ensure start script is executable
RUN chmod +x start.sh

# Start command
CMD ["bash", "/opt/start.sh"]


