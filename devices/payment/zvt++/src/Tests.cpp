/*
 * Tests.hpp
 *
 *  Created on: 20.11.2020
 *      Author: ah
 */
//stl
#include <iostream>
#include <iomanip>
#include <string>
#include <iterator>
#include <algorithm>
#include <array>
#include <bitset>
#include <map>

//boost
#include <boost/algorithm/hex.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/array.hpp>
#include <boost/asio.hpp>

//zvt++
#include "Apdu.hpp"
#include "Utils.hpp"
#include "HexToByte.hpp"
#include "Bmp.hpp"
#include "Tlv.hpp"
#include "Tag.hpp"

#include <bmps/IndividualTotals.hpp>

#include <cmds/Register.hpp>
#include <cmds/Ack.hpp>
#include <cmds/Status.hpp>
#include <cmds/CompletionForRegister.hpp>
#include <cmds/CompletionForStatus.hpp>
#include <cmds/Auth.hpp>
#include <cmds/StatusInfo.hpp>
#include <cmds/IntermediateStatusInfo.hpp>
#include <cmds/BlockReceipt.hpp>
#include <cmds/EndOfDay.hpp>
#include <cmds/Diagnosis.hpp>
#include <cmds/ConfigFeig.hpp>
#include <cmds/PPAuth.hpp>

#include "Tests.hpp"

void test_bcd()
{
    cout << "4-byte BCD (tid) -> " << Zvt::Bmp::BCDToString({0x52, 0x50, 0x00, 0x68}) << endl;
    Utils::log("BCD: ", Zvt::Bmp::NumberToBCD(1234, 6));
    cout << endl;
    Utils::log("BCD: ", Zvt::Bmp::NumberToBCD(12345, 6));
    cout << endl;
}

void test_tag_ctors()
{
    Zvt::Tag t5(0x12);
    Utils::log(t5.get());
    Utils::log(t5.data());

    Zvt::Tag t6(0x12, 0x30);
    Utils::log(t6.get());
    Utils::log(t6.data());

    Zvt::Tag t7(0x27, {0x14, 0x01, 0x01});
    Utils::log(t7.get());
    Utils::log(t7.data());

    Zvt::Tag t8({0x14, 0x1, 0x01});
    Utils::log(t8.get());
    Utils::log(t8.data());
}

void test_tlv_with_tags_and_subtags()
{
    Zvt::Tag t0({0x12, 0x01, 0x30});
    Zvt::Tag t1({0x27, 0x03, 0x14, 0x01, 0x01});
    Zvt::Tag t2(
            {0x26, 0x81, 0xd4, 0x0a, 0x02, 0x05, 0x01, 0x0a, 0x02, 0x06, 0x00, 0x0a, 0x02, 0x06, 0x01, 0x0a, 0x02, 0x06,
             0x02, 0x0a, 0x02, 0x06, 0x03,
             0x0a, 0x02, 0x06, 0x05, 0x0a, 0x02, 0x06, 0x0a, 0x0a, 0x02, 0x06, 0x0c, 0x0a, 0x02, 0x06, 0x12, 0x0a, 0x02,
             0x06, 0x18, 0x0a, 0x02, 0x06,
             0x1a, 0x0a, 0x02, 0x06, 0x1b, 0x0a, 0x02, 0x06, 0x20, 0x0a, 0x02, 0x06, 0x21, 0x0a, 0x02, 0x06, 0x22, 0x0a,
             0x02, 0x06, 0x23, 0x0a, 0x02,
             0x06, 0x24, 0x0a, 0x02, 0x06, 0x25, 0x0a, 0x02, 0x06, 0x26, 0x0a, 0x02, 0x06, 0x30, 0x0a, 0x02, 0x06, 0x31,
             0x0a, 0x02, 0x06, 0x50, 0x0a,
             0x02, 0x06, 0x70, 0x0a, 0x02, 0x06, 0x85, 0x0a, 0x02, 0x06, 0x86, 0x0a, 0x02, 0x06, 0x87, 0x0a, 0x02, 0x06,
             0x88, 0x0a, 0x02, 0x06, 0x93,
             0x0a, 0x02, 0x06, 0xb0, 0x0a, 0x02, 0x06, 0xc0, 0x0a, 0x02, 0x06, 0xc1, 0x0a, 0x02, 0x06, 0xc2, 0x0a, 0x02,
             0x06, 0xc3, 0x0a, 0x02, 0x06,
             0xc4, 0x0a, 0x02, 0x06, 0xc5, 0x0a, 0x02, 0x06, 0xc6, 0x0a, 0x02, 0x06, 0xd1, 0x0a, 0x02, 0x06, 0xd3, 0x0a,
             0x02, 0x06, 0xe0, 0x0a, 0x02,
             0x06, 0xe1, 0x0a, 0x02, 0x06, 0xe2, 0x0a, 0x02, 0x06, 0xe3, 0x0a, 0x02, 0x06, 0xe5, 0x0a, 0x02, 0x06, 0xe6,
             0x0a, 0x02, 0x06, 0xe7, 0x0a,
             0x02, 0x08, 0x01, 0x0a, 0x02, 0x08, 0x02, 0x0a, 0x02, 0x08, 0x10, 0x0a, 0x02, 0x08, 0x11, 0x0a, 0x02, 0x08,
             0x12, 0x0a, 0x02, 0x08, 0x13,
             0x0a, 0x02, 0x08, 0x30, 0x0a, 0x02, 0x08, 0x50});

    Zvt::Tag t4({0x1f, 0x40, 0x01, 0xff});
    Zvt::Tag t3({0x1f, 0x40, 0x00});

    Zvt::Tlv tlv;

    tlv.add(t0);
    tlv.add(t1);
    tlv.add(t2);
    tlv.add(t3);
//@formatter:off
    Zvt::Tlv tlv1(Zvt::HexToByte("06 14 24 12 07 10 42 69 74 74 65 20 77 61 72 74 65 6e 20 2e 2e 2e").vector());
    Zvt::Tlv tlv2(Zvt::HexToByte(
            "06 82 01 28 27 03 14 01 fe 12 01 30 26 81 d4 0a 02 05 01 0a 02 06 00 0a 02 06 01 0a 02 06 02 0a 02 06 03 0a 02 06 05 0a 02 06 0a 0a 02 06 0c 0a 02 06 12 0a 02 06 18 0a 02 06 1a 0a 02 06 1b 0a 02 06 20 0a 02 06 21 0a 02 06 22 0a 02 06 23 0a 02 06 24 0a 02 06 25 0a 02 06 26 0a 02 06 30 0a 02 06 31 0a 02 06 50 0a 02 06 70 0a 02 06 85 0a 02 06 86 0a 02 06 87 0a 02 06 88 0a 02 06 93 0a 02 06 b0 0a 02 06 c0 0a 02 06 c1 0a 02 06 c2 0a 02 06 c3 0a 02 06 c4 0a 02 06 c5 0a 02 06 c6 0a 02 06 d1 0a 02 06 d3 0a 02 06 e0 0a 02 06 e1 0a 02 06 e2 0a 02 06 e3 0a 02 06 e5 0a 02 06 e6 0a 02 06 e7 0a 02 08 01 0a 02 08 02 0a 02 08 10 0a 02 08 11 0a 02 08 12 0a 02 08 13 0a 02 08 30 0a 02 08 50 1f 71 46 0f 12 14 1b 1d 25 26 27 2d 40 41 e8 1f 01 1f 02 1f 03 1f 06 1f 0d 1f 15 1f 25 1f 32 1f 33 1f 35 1f 36 1f 46 1f 48 1f 49 1f 4a 1f 4b 1f 4c 1f 5b 1f 60 1f 61 1f 62 1f 63 1f 6b 1f 6d 1f 70 1f 72 1f 76 1f 77 1f 78")
                          .vector());
    Zvt::Tlv tlv3(Zvt::HexToByte(
            "06 81 bc 1f 44 04 52 50 00 68 1f 54 01 62 1f 55 02 00 00 e4 24 1f 40 05 44 32 32 30 57 1f 41 0e 70 30 32 2e 30 30 35 39 2e 34 30 2e 30 31 1f 42 04 12 43 82 20 1f 43 01 00 e4 1e 1f 40 0d 4d 73 63 52 65 61 64 65 72 53 74 75 62 1f 41 00 1f 42 04 00 00 00 00 1f 43 01 00 e4 1e 1f 40 0d 49 63 63 52 65 61 64 65 72 53 74 75 62 1f 41 00 1f 42 04 00 00 00 00 1f 43 01 00 e4 1f 1f 40 0e 43 74 6c 73 52 65 61 64 65 72 53 74 75 62 1f 41 00 1f 42 04 00 00 00 00 1f 43 01 00 1f 59 14 41 30 30 30 30 30 30 33 35 39 31 30 31 30 30 32 38 30 30 31 1f 59 04 30 30 30 30 1f 59 04 30 30 42 43")
                          .vector());

    for (Zvt::Tag tag: tlv2.tags())
    { /*cout << "Adding " << tag.tagStr() << endl;*/ tlv.add(tag); }
    for (Zvt::Tag tag: tlv3.tags())
    { /*cout << "Adding " << tag.tagStr() << endl;*/ tlv.add(tag); }
    for (Zvt::Tag tag: tlv1.tags())
    { /*cout << "Adding " << tag.tagStr() << endl;*/ tlv.add(tag); }
//@formatter:on

    /**
     * A iterator-like style would be nice...
     * find a special tag and may be recursive strip of all of the tags is usefull
     */
    for (Zvt::Tag tag: tlv.tags())
    {
        cout << "Tag: " << setw(4) << setfill('_') << left << tag.tag_str() << right << "  λ " << setw(4)
             << setfill('.') << tag.data().size() << "   ";
        Utils::lognl(tag.data());
        cout << endl;

        for (Zvt::Tag stag: tag.subtags())
        {
            cout << "     " << setw(4) << setfill('_') << left << stag.tag_str() << right << "  λ " << setw(4)
                 << setfill('.') << stag.data().size() << "   ";
            Utils::lognl(stag.data());
            cout << endl;
        }
    }

    cout.clear();
}

void block_receipt_07_test()
{
    Cmd::BlockReceipt blockReceipt(
            Cmd::BlockReceipt(
                    Zvt::HexToByte(
                            "06 d3 ff 14 03 06 82 03 10 1f 07 01 01 25 82 03 08 09 01 00 07 1f 20 20 20 48 2d c3 84 2d 4e 2d 44 2d 4c 2d 45 2d 52 2d 42 2d 45 2d 4c 2d 45 2d 47 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 4c 41 56 45 47 4f 20 54 45 53 54 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 20 20 20 20 4b 61 72 74 65 6e 7a 61 68 6c 75 6e 67 20 67 69 72 6f 63 61 72 64 20 20 20 20 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 42 65 74 72 61 67 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 2c 30 30 20 45 55 52 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 31 39 2e 31 31 2e 32 30 32 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 39 3a 33 38 07 1e 54 65 72 6d 69 6e 61 6c 2d 49 44 20 20 20 20 20 20 20 20 20 20 20 35 32 35 30 30 30 36 38 07 1e 54 41 2d 4e 72 2e 20 30 30 30 34 36 34 20 20 20 42 65 6c 65 67 2d 4e 72 2e 20 30 31 36 32 07 1e 4b 61 72 74 65 6e 6e 72 2e 20 20 36 38 30 35 39 30 34 34 31 31 30 30 30 30 32 35 30 35 38 07 1e 4b 2e 66 6f 6c 67 2e 4e 72 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 30 30 30 31 07 1f 67 c3 bc 6c 74 69 67 20 62 69 73 20 28 4d 4d 2f 4a 4a 29 20 20 20 20 20 20 20 30 33 2f 32 34 07 1e 4b 6f 6e 74 61 6b 74 6c 6f 73 20 43 68 69 70 20 20 20 20 20 20 20 20 20 4f 6e 6c 69 6e 65 07 1e 56 55 2d 4e 75 6d 6d 65 72 20 20 20 20 20 20 31 34 36 39 38 30 30 34 20 20 20 20 20 20 20 07 1e 41 75 74 6f 72 69 73 69 65 72 75 6e 67 73 6e 75 6d 6d 65 72 20 20 20 20 38 37 30 30 33 39 07 1e 41 75 74 6f 72 69 73 69 65 72 75 6e 67 73 61 6e 74 77 6f 72 74 63 6f 64 65 20 20 20 30 30 07 1e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 1e 2a 2a 20 20 20 20 20 5a 61 68 6c 75 6e 67 20 65 72 66 6f 6c 67 74 20 20 20 20 20 20 2a 2a 09 01 ff")
                            .vector()));

    cout << "is_merchant      : " << blockReceipt.is_merchant() << endl;
    cout << "is_customer      : " << blockReceipt.is_customer() << endl;
    cout << "is_administration: " << blockReceipt.is_administration() << endl;
    cout << "receipt_text     : " << endl << blockReceipt.receipt() << endl;
}

void bmp_test()
{
    Zvt::Bmp bmp1;
    Zvt::Bmp bmp2(0x03, Zvt::One_Byte_Binary, {0x03});
    Zvt::Bmp bmp3(bmp2);

    Utils::log("BMP 1: ", bmp1.all());
    Utils::log("BMP 2: ", bmp2.all());
    Utils::log("BMP 3: ", bmp3.all());
    Utils::log("BMP 1: ", bmp1.get());
    Utils::log("BMP 2: ", bmp2.get());
    Utils::log("BMP 3: ", bmp3.get());
}

int end_of_day_bmp60()
{
    std::cout << "<-PT|       - TESTVERSION -        " << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|         LAVEGO TEST          " << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|        Tagesabschluss        " << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|25.11.2020               10:30" << std::endl;
    std::cout << "<-PT|Terminal-ID           52800072" << std::endl;
    std::cout << "<-PT|TA-Nr.                  978010" << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|Beleg-Nr. von: 2873  bis: 2873" << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|          Summen EUR          " << std::endl;
    std::cout << "<-PT|Z-System     Anzahl     Betrag" << std::endl;
    std::cout << "<-PT|------------------------------" << std::endl;
    std::cout << "<-PT|VISA electron PIN             " << std::endl;
    std::cout << "<-PT| Kauf        0001         1,00" << std::endl;
    std::cout << "<-PT| Summe      00001         1,00" << std::endl;
    std::cout << "<-PT|------------------------------" << std::endl;
    std::cout << "<-PT|VISA electron                 " << std::endl;
    std::cout << "<-PT|            00001         1,00" << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|------------------------------" << std::endl;
    std::cout << "<-PT|Summe       00001         1,00" << std::endl;
    std::cout << "<-PT|                              " << std::endl;
    std::cout << "<-PT|**         Gebucht          **" << std::endl;

    Cmd::StatusInfo s2(
            {0x04, 0x0f, 0x4d, 0x27, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0xf0, 0xf5, 0xf3, 0x28, 0x73,
             0x28, 0x73, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x01, 0x00, 0x00, 0x00,
             0x00, 0x01, 0x00, 0x0b, 0x97, 0x80, 0x10, 0x0c, 0x10, 0x30, 0x04, 0x0d, 0x11, 0x25});

    s2.print();

    return 0;
}

int status_info_test()
{
    Cmd::StatusInfo s0(
            {0x04, 0x0f, 0xb7, 0x27, 0x00, 0x29, 0x52, 0x50, 0x00, 0x68, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0b,
             0x00, 0x04, 0x85, 0x0c,
             0x18, 0x59, 0x29, 0x0d, 0x11, 0x21, 0x0e, 0x24, 0x03, 0x17, 0x00, 0x01, 0x19, 0x60, 0x22, 0xf1, 0xf0, 0x68,
             0x05, 0x90, 0xee, 0xee,
             0xee, 0xee, 0xe5, 0x05, 0x8f, 0x87, 0x01, 0x75, 0x3b, 0x36, 0x34, 0x30, 0x39, 0x30, 0x30, 0x00, 0x00, 0x2a,
             0x31, 0x34, 0x36, 0x39,
             0x38, 0x30, 0x30, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0xf0, 0xf9, 0x67, 0x69, 0x72, 0x6f,
             0x63, 0x61, 0x72, 0x64,
             0x00, 0x8a, 0x05, 0x06, 0x5d, 0x41, 0x01, 0x05, 0x45, 0x04, 0x21, 0x00, 0x00, 0x00, 0x46, 0x10, 0x2f, 0x30,
             0x30, 0x30, 0x30, 0x30,
             0x30, 0x30, 0x30, 0x30, 0x30, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x47, 0x10, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x30,
             0x30, 0x30, 0x30, 0x30,
             0x30, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x60, 0x20, 0x43, 0x0a, 0xa0, 0x00, 0x00, 0x03, 0x59, 0x10, 0x10, 0x02,
             0x80, 0x01, 0x42, 0x08,
             0x67, 0x69, 0x72, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x08, 0x67, 0x69, 0x72, 0x6f, 0x63, 0x61, 0x72, 0x64,
             0x2f, 0x0c, 0x1f, 0x10,
             0x01, 0x00, 0x1f, 0x11, 0x01, 0x01, 0x1f, 0x12, 0x01, 0x02});

    s0.print();

    Cmd::StatusInfo s1(
            {0x04, 0x0f, 0xff, 0x5e, 0x01, 0x27, 0x00, 0x29, 0x52, 0x80, 0x00, 0x72, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01,
             0x00, 0x0b, 0x97, 0x79,
             0x89, 0x0c, 0x21, 0x57, 0x39, 0x0d, 0x11, 0x24, 0x17, 0x00, 0x00, 0x19, 0x60, 0x22, 0xf0, 0xf8, 0x37, 0x42,
             0x45, 0xee, 0xee, 0xe1,
             0x00, 0x3f, 0x87, 0x28, 0x65, 0x3b, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x00, 0x2a, 0x30, 0x20, 0x20,
             0x20, 0x20, 0x20, 0x20,
             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0xf1, 0xf7, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41,
             0x4e, 0x20, 0x45, 0x58,
             0x50, 0x52, 0x45, 0x53, 0x53, 0x00, 0x8a, 0x08, 0x3c, 0xf0, 0xf6, 0xf3, 0x41, 0x49, 0x44, 0x20, 0x20, 0x20,
             0x20, 0x20, 0x20, 0x20,
             0x20, 0x20, 0x3a, 0x20, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x2f, 0x43, 0x61, 0x70, 0x74, 0x2e, 0x2d, 0x52,
             0x65, 0x66, 0x2e, 0x20,
             0x20, 0x3a, 0x20, 0x30, 0x30, 0x30, 0x30, 0x2f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x2d, 0x4e, 0x72, 0x2e,
             0x20, 0x20, 0x3a, 0x20,
             0x30, 0x30, 0x20, 0x30, 0x35, 0x33, 0x20, 0x30, 0x30, 0x06, 0x81, 0xbd, 0x41, 0x01, 0x08, 0x45, 0x04, 0x21,
             0x00, 0x00, 0x00, 0x46,
             0x39, 0x30, 0x38, 0x34, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x2f, 0x45, 0x38, 0x30, 0x30, 0x2f, 0x35,
             0x45, 0x30, 0x33, 0x30,
             0x30, 0x2f, 0x39, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x30, 0x33, 0x30, 0x30, 0x38,
             0x34, 0x30, 0x30, 0x30,
             0x38, 0x30, 0x30, 0x30, 0x45, 0x38, 0x30, 0x30, 0x30, 0x31, 0x2f, 0x2f, 0x30, 0x30, 0x47, 0x39, 0x30, 0x38,
             0x34, 0x30, 0x30, 0x30,
             0x38, 0x30, 0x30, 0x30, 0x2f, 0x45, 0x38, 0x30, 0x30, 0x2f, 0x35, 0x45, 0x30, 0x33, 0x30, 0x30, 0x2f, 0x39,
             0x30, 0x30, 0x32, 0x39,
             0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x30, 0x33, 0x30, 0x30, 0x38, 0x34, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30,
             0x30, 0x45, 0x38, 0x30,
             0x30, 0x30, 0x31, 0x2f, 0x2f, 0x30, 0x30, 0x60, 0x2e, 0x43, 0x08, 0xa0, 0x00, 0x00, 0x00, 0x25, 0x01, 0x08,
             0x01, 0x42, 0x10, 0x41,
             0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x20, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4a, 0x10, 0x41,
             0x4d, 0x45, 0x52, 0x49,
             0x43, 0x41, 0x4e, 0x20, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x2f, 0x0c, 0x1f, 0x10, 0x01, 0x01, 0x1f,
             0x11, 0x01, 0x01, 0x1f,
             0x12, 0x01, 0x01});

    s1.print();

    Cmd::StatusInfo s2(
            {0x04, 0x0f, 0x4d, 0x27, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0xf0, 0xf5, 0xf3, 0x28, 0x73,
             0x28, 0x73, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x01, 0x00, 0x00, 0x00,
             0x00, 0x01, 0x00, 0x0b, 0x97, 0x80, 0x10, 0x0c, 0x10, 0x30, 0x04, 0x0d, 0x11, 0x25});

    s2.print();

    return 0;
}

void ll_and_lllvars_test()
{
    std::vector<unsigned char> ll = {0xf0, 0xf5, 0x01, 0x02, 0x03, 0x04, 0x05, 0x1f, 0x40, 0x00};
    std::vector<unsigned char> lll = {0xf0, 0xf1, 0xf5, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05,
                                      0x01, 0x02, 0x03, 0x04, 0x05, 0x1f, 0x40,
                                      0x00};

    std::vector<unsigned char> bmp60 = {0xf0, 0xf5, 0xf3, 0x28, 0x67, 0x28, 0x71, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                                        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                        0x00, 0x01, 0x00, 0x0b, 0x97, 0x80, 0x04,
                                        0x0c, 0x10, 0x04, 0x02, 0x0d, 0x11, 0x25};

    Utils::log("range1   : ", Zvt::copyRange(ll, 2, ll.size() - 1));
    Utils::log("range2   : ", Zvt::copyRange(lll, 3, lll.size() - 1));
    Utils::log("range6   : ", Zvt::copyRange(bmp60, 3, bmp60.size() - 1));

    Utils::log("llvar    : ", Zvt::llvar_data(ll));
    Utils::log("lllvar   : ", Zvt::lllvar_data(lll));
    Utils::log("bmp60    : ", Zvt::lllvar_data(bmp60));

    Utils::log("to LLVAR : ", Utils::stringToHexAsLLVar("1F01","0123456789"));
    Utils::log("to LLVAR : ", Utils::stringToHexAsLLVar("1F02","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    Utils::log("to LLLVAR: ", Utils::stringToHexAsLLLVar("1F01","0123456789"));
    Utils::log("to LLLVAR: ", Utils::stringToHexAsLLLVar("1F02","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    Utils::log("to LLLVAR: ", Utils::stringToHexAsLLLVar("1F03","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890-------******************************####+++++***"));


}

void intermediate_info_test()
{

    Cmd::IntermediateStatusInfo is0(
            {0x04, 0xff, 0x18, 0x1a, 0x03, 0x06, 0x14, 0x24, 0x12, 0x07, 0x10, 0x42, 0x69, 0x74, 0x74, 0x65, 0x20, 0x77,
             0x61, 0x72,
             0x74, 0x65, 0x6e, 0x20, 0x2e, 0x2e, 0x2e});
    Cmd::IntermediateStatusInfo is1(
            {0x04, 0xff, 0x3e, 0xff, 0x03, 0x06, 0x3a, 0x24, 0x38, 0x07, 0x1d, 0x30, 0x30, 0x20, 0x47, 0x45, 0x4e, 0x45,
             0x48, 0x4d,
             0x49, 0x47, 0x55, 0x4e, 0x47, 0x20, 0x4b, 0x41, 0x52, 0x54, 0x45, 0x20, 0x47, 0x45, 0x50, 0x52, 0x55, 0x45,
             0x46, 0x54,
             0x07, 0x00, 0x07, 0x15, 0x42, 0x69, 0x74, 0x74, 0x65, 0x20, 0x4b, 0x61, 0x72, 0x74, 0x65, 0x20, 0x65, 0x6e,
             0x74, 0x6e,
             0x65, 0x68, 0x6d, 0x65, 0x6e});

    Cmd::IntermediateStatusInfo is2(
            {0x04, 0xff, 0x3d, 0xff, 0x06, 0x3a, 0x24, 0x38, 0x07, 0x1d, 0x30, 0x30, 0x20, 0x47, 0x45, 0x4e, 0x45, 0x48,
             0x4d, 0x49,
             0x47, 0x55, 0x4e, 0x47, 0x20, 0x4b, 0x41, 0x52, 0x54, 0x45, 0x20, 0x47, 0x45, 0x50, 0x52, 0x55, 0x45, 0x46,
             0x54, 0x07,
             0x00, 0x07, 0x15, 0x42, 0x69, 0x74, 0x74, 0x65, 0x20, 0x4b, 0x61, 0x72, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x74,
             0x6e, 0x65,
             0x68, 0x6d, 0x65, 0x6e});    //cout << "is0 " << endl << is0.display_text() << endl;
    is0.print();
    //cout << "is1 " << endl << is1.display_text() << endl;
    is1.print();
    //cout << "is2 " << endl << is2.display_text() << endl;
    is2.print();
}

void diagnosis_apdu_test()
{
    Cmd::Diagnosis lineDiagnosis(Zvt::LineDiagnosis);
    Cmd::Diagnosis extendedDiagnosis(Zvt::ExtendedDiagnosis);
    Cmd::Diagnosis configuration(Zvt::Configuration);
    Cmd::Diagnosis emvConfiguration(Zvt::EmvConfiguration);
    Cmd::Diagnosis ep2Configuration(Zvt::Ep2Configuration);

    Utils::log("LineDiagnosis    : ", lineDiagnosis.get());
    Utils::log("ExtendedDiagnosis: ", extendedDiagnosis.get());
    Utils::log("Configuration    : ", configuration.get());
    Utils::log("EmvConfiguration : ", emvConfiguration.get());
    Utils::log("Ep2Configuration : ", ep2Configuration.get());
}

void config_feig_test()
{
    Cmd::ConfigFeig cf("528346", "213.183.19.105", 30101, 0x01);

    Utils::log("0813: ", cf.get());
}

int pp_auth()
{
    std::string strDataiF63 = "D=LAV;T=D;I=001;S=9ce7ab9bd1426b13;L=ar4yXwYYrpD5yuII;P={t=F;b=3600;k=TEST-123-456;s=535535;u=c9661d9f-db18-4c42-9499-974a63da9a88;m=5000;r=998765}";
    Cmd::PPAuth pp_auth(1100, 0x44, std::vector<unsigned char>(strDataiF63.begin(), strDataiF63.end()));

    Utils::log("PPAuth::1F63: ", std::vector<unsigned char>(strDataiF63.begin(), strDataiF63.end()));
    Utils::log("PPAuth::get : ", pp_auth.get());
    Utils::log("PPAuth::data: ", pp_auth.data());

    return 0;
}

int proprietary_tlv_tags()
{
    Zvt::Tag tag(0xff, 0x10, std::vector<unsigned char>());

    Utils::log("FF10 data        : ", tag.data());
    Utils::log("FF10 tag         : ", tag.tag());
    Utils::log("FF10 get         : ", tag.get());
    Utils::log("FF10 isContructed: ", tag.isContructed());

    tag.subtags();

    return 0;
}

int test()
{
    try
    {
        proprietary_tlv_tags();
        ll_and_lllvars_test();
    }
    catch (std::exception &e)
    {
        cerr << e.what() << std::endl;
    }

    return 0;
}
