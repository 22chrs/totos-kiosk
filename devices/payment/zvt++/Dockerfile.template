FROM balenalib/raspberrypi5-debian:bullseye-build

# Set the working directory
WORKDIR /opt/

# Install build essentials, clang, g++, git, other dependencies, AND Boost
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    clang \
    g++ \
    git \
    wget \
    libssl-dev \
    libboost-all-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Download, compile, and install CMake (if you don't have a pre-built version)
RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3.tar.gz && \
    tar -xzvf cmake-3.21.3.tar.gz && \
    cd cmake-3.21.3 && \
    ./bootstrap -- -DCMAKE_BUILD_TYPE:STRING=Release && \
    make && \
    make install

# Download and install Boost 1.84.0
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.84.0/source/boost_1_84_0.tar.bz2 && \
    tar -xf boost_1_84_0.tar.bz2 && \
    cd boost_1_84_0 && \
    ./bootstrap.sh && \
    ./b2 cxxflags=-fPIC install && \
    ./b2 link=shared install

# Copy your project files
#komig
#COPY ./src /opt/zvt++/src
COPY ./src /opt/zvt++/src

COPY ./hosts.json /opt/zvt++
COPY ./CMakeLists.txt /opt/zvt++

COPY ./entrypoint.sh /opt/zvt++

# Set compiler environment variables
ENV CXX=clang++
ENV CC=clang

# Build your application
WORKDIR /opt/zvt++
RUN mkdir -p build && \
    cd build && \
    cmake .. && \
    make

# Create and set entrypoint script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose your application's port
EXPOSE 301 

# Set the container's entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
