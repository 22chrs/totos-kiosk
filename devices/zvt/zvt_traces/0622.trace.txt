Wir senden mit apdu_ctls_wait_loop den übergeben Befehl erst wenn eine Karte vorgehalten wird.

Zuerst senden wir den Register, im Anschluss ein 0501 StatusEnquiry. der 0501 sobald in dessen Completion 060F eine Karte erkannt wird senden
wir den 0622


%ah@stonewall ~ λ zvt++ apdu_ctls_wait_loop fg "0622 07 04 000000001990"
socket option: 1024, set with ec {0}
socket option: get value is 1024
option: fg
option: 0622 07 04 000000001990

Register mit Standard Optionen

->PT: 06 00 18 01 02 03 9e 09 78 06 10 10 02 20 04 12 01 40 27 03 14 01 fe 40 02 b0 b0
<-PT* Ack (8000) size (3)
<-PT$ 80 00 00
<-PT: received 20 from 20
<-PT* Completion (060F) size (20)


060F ist die Completion. Das ende des Register Kommandos

Hier wird 0x10 als Status Code gesendet (siehe Bits und dessen Aufschlüsselung in der Doku , ab Seite 26)

<-PT$ 06 0f 11 19 10 29 52 50 02 31 49 09 78 06 05 27 03 14 01 fe
->PT: 80 00 00
<-PT| from cmd 0600
<-PT| tid      --> 52500231
<-PT| status   --> 00010000
<-PT| currency --> 978
Tag: 27__  λ ...3   14 01 fe
     14__  λ ...1   fe


Zusätzlich zum Status gibt es noch unterschiedlichste andere Werte wie TID, Währung, Zeichensatz etc... 

Zerlegt:
060f    11     Länge in HEX

19      10      BMP 0x19 mit Wert 0x10
29      52 50 02 31 
49      09 78 

TLV (BER-TLV format)
06      05 Länge in Hex
27      03 Tag 0x27 mit 0x3 bytes an Daten
           14 01 Tag 0x14 mit einem Byte Daten 0xFE --> UTF-8 

0501 Stats Enquiry, dieses Kommando erkennt unter anderem die Karte

Der TLV Container mit dem Tag 1F72 sorgt für einen kleinen Timeout. Wird keine Karte erkannt 0501 erneut senden


->PT: 05 01 0b 01 02 03 03 05 06 04 1f 72 01 01
<-PT* Ack (8000) size (3)
<-PT$ 80 00 00
<-PT: received 136 from 136
<-PT* Completion (060F) size (136)
<-PT$ 06 0f 85 f0 f4 f0 47 45 52 2d 41 50 50 2d 76 32 2e 30 2e 35 3b 63 53 30 32 2e 30 31 2e 30 30 2d 31 30 2e 33 34 2d 32 2d 32 3b 43 43 32 36 00 06 57 1f 44 04 52 50 02 31 e4 3f 1f 40 0a 63 56 45 4e 44 20 62 6f 78 2b 1f 41 28 47 45 52 2d 41 50 50 2d 76 32 2e 30 2e 35 3b 63 53 30 32 2e 30 31 2e 30 30 2d 31 30 2e 33 34 2d 32 2d 32 3b 43 43 32 36 1f 42 04 17 f0 85 4a 34 0d 1f 0e 04 20 22 07 05 1f 0f 03 08 28 30
->PT: 80 00 00
<-PT: 0501 Completion with Status 0
->PT: 05 01 0b 01 02 03 03 05 06 04 1f 72 01 01
<-PT: 1F44 --> 52500231
<-PT: E4
<-PT:     1F40 --> 6356454E4420626F782B
<-PT:     1F41 --> 4745522D4150502D76322E302E353B635330322E30312E30302D31302E33342D322D323B43433236
<-PT:     1F42 --> 17F0854A
<-PT: 34
<-PT:     1F0E --> 20220705
<-PT:     1F0F --> 082830
<-PT* Ack (8000) size (3)
<-PT$ 80 00 00
<-PT: received 172 from 172
<-PT* Completion (060F) size (172)
<-PT$ 06 0f a9 f0 f4 f0 47 45 52 2d 41 50 50 2d 76 32 2e 30 2e 35 3b 63 53 30 32 2e 30 31 2e 30 30 2d 31 30 2e 33 34 2d 32 2d 32 3b 43 43 32 36 00 06 7b 60 22 43 09 a0 00 00 00 59 45 43 01 00 43 0a a0 00 00 03 59 10 10 02 80 01 43 09 d2 76 00 00 25 47 41 01 00 1f 44 04 52 50 02 31 e4 3f 1f 40 0a 63 56 45 4e 44 20 62 6f 78 2b 1f 41 28 47 45 52 2d 41 50 50 2d 76 32 2e 30 2e 35 3b 63 53 30 32 2e 30 31 2e 30 30 2d 31 30 2e 33 34 2d 32 2d 32 3b 43 43 32 36 1f 42 04 17 f0 85 4a 34 0d 1f 0e 04 20 22 07 05 1f 0f 03 08 28 32
->PT: 80 00 00
<-PT: 0501 Completion with Status 0
<-PT: 0501 Completion with card present on tap field
->PT: 06 22 07 04 00 00 00 00 19 90

Das 0622 Kommando wurde gesendet, weil Tag 0x60 mit subtag 0x43 erkannt wurde. Das bedeutet "Karte wird vorgehalten".

<-PT: 60
<-PT:     43 --> A00000005945430100
<-PT:     43 --> A0000003591010028001
<-PT:     43 --> D27600002547410100
<-PT: 1F44 --> 52500231
<-PT: E4
<-PT:     1F40 --> 6356454E4420626F782B
<-PT:     1F41 --> 4745522D4150502D76322E302E353B635330322E30312E30302D31302E33342D322D323B43433236
<-PT:     1F42 --> 17F0854A
<-PT: 34
<-PT:     1F0E --> 20220705
<-PT:     1F0F --> 082832
<-PT* Ack (8000) size (3)
<-PT$ 80 00 00
<-PT: received 23 from 23
<-PT* IntermdiateStatusInfo (04FF) size (23)
<-PT$ 04 ff 14 17 01 06 10 24 0e 07 0c 42 69 74 74 65 20 77 61 72 74 65 6e
<-PTλ Bitte warten

Es folgen diverse 04FF Nachrichten. IntermediateStatus, im groben sind das die Meldungen welche man auch im Display sieht.

->PT: 80 00 00
<-PT: received 45 from 45
<-PT* IntermdiateStatusInfo (04FF) size (45)
<-PT$ 04 ff 2a 0e 01 06 26 24 24 07 22 41 75 74 6f 72 69 73 69 65 72 75 6e 67 20 6c c3 a4 75 66 74 2c 20 62 69 74 74 65 20 77 61 72 74 65 6e
<-PTλ Autorisierung läuft, bitte warten
->PT: 80 00 00
<-PT: received 28 from 28
<-PT* IntermdiateStatusInfo (04FF) size (28)
<-PT$ 04 ff 19 d2 01 06 15 24 13 07 11 56 65 72 62 69 6e 64 75 6e 67 73 61 75 66 62 61 75
<-PTλ Verbindungsaufbau
->PT: 80 00 00
<-PT: received 23 from 23
<-PT* IntermdiateStatusInfo (04FF) size (23)
<-PT$ 04 ff 14 04 01 06 10 24 0e 07 0c 44 61 74 65 6e 76 65 72 73 61 6e 64
<-PTλ Datenversand
->PT: 80 00 00
<-PT: received 23 from 23
<-PT* IntermdiateStatusInfo (04FF) size (23)
<-PT$ 04 ff 14 0e 01 06 10 24 0e 07 0c 44 61 74 65 6e 65 6d 70 66 61 6e 67
<-PTλ Datenempfang
->PT: 80 00 00
<-PT: received 145 from 145
<-PT* StatusInfo (040F) size (145)
<-PT$ 04 0f 8e 27 00 04 00 00 00 00 19 90 0c 08 28 32 0d 07 05 22 f1 f0 68 05 90 44 11 00 00 22 01 4f 17 00 01 87 00 31 3b 34 32 34 32 34 32 00 00 0b 00 08 96 19 60 29 52 50 02 31 0e 24 03 8a 05 8b f0 f9 67 69 72 6f 63 61 72 64 00 8c 00 2a 31 34 36 39 38 30 30 33 20 20 20 20 20 20 20 06 32 41 02 00 05 49 02 00 00 15 02 44 45 60 16 42 08 67 69 72 6f 63 61 72 64 43 0a a0 00 00 03 59 10 10 02 80 01 2f 0c 1f 10 01 00 1f 11 01 01 1f 12 01 02

Das ist der erste Punkt wo sie den Antwort Code bekommen:

status == 0x00      // Kein Fehler bis hier!

Achtung! Die Zahnlung wurde zwar positiv autorisiert aber man muss den kompletten Nachrichtenverlauf abwarten. Negtzwerkfehler etc können einen AutoStorno auslösen!


<-PT| status                   00
<-PT| payment_type             60
<-PT| card_type                05
<-PT| card_type_net_op         00
<-PT| result_code              ff
<-PT| currency                 978
<-PT| aid                      424242
<-PT| amount in cent           1990
<-PT| card_name                girocard
<-PT| date                     0705
<-PT| expiry_date              2403
<-PT| original_trace           0
<-PT| receipt_number           31
<-PT| sequence_number          1
<-PT| tid                      52500231
<-PT| time                     082832
<-PT| trace                    896
<-PT| pan                      6805904411000022014f
<-PT| vu_number                14698003
<-PT| additional_text
<-PT| tlv_tag                  41 --> 00 05
<-PT| tlv_tag                  49 --> 00 00
<-PT| tlv_tag                  15 --> 44 45
<-PT| tlv_tag                  60 --> 42 08 67 69 72 6F 63 61 72 64 43 0A A0 00 00 03 59 10 10 02 80 01
<-PT| tlv_subtag               42 --> 67 69 72 6F 63 61 72 64
<-PT| tlv_subtag               43 --> A0 00 00 03 59 10 10 02 80 01
<-PT| tlv_tag                  2F --> 1F 10 01 00 1F 11 01 01 1F 12 01 02
<-PT| tlv_subtag               1F10 --> 00
<-PT| tlv_subtag               1F11 --> 01
<-PT| tlv_subtag               1F12 --> 02
->PT: 80 00 00
******
receiptNo=31
******
<-PT* Completion (060F) size (3)
<-PT$ 06 0f 00

Der 2te Punkt, die Completion. Status 0x00 aus 04FF und Completion heisst "OK". Kommt ein 061E Abort ist das Kommando 0622 nicht erfolgreich. Sehen sie hier ein NAck 0x84 NAchricht ist ebenso etwas falsch gelaufen!


->PT: 80 00 00
%ah@stonewall ~ λ


Siehe nächsten Trace 0624.trace.txt


